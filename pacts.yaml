# basic information for generating and executing this definition
SenzaInfo:
  StackName: "pacts"
  Parameters:
  - ImgTag:
      Description: "Docker image tag to deploy"
  - InstanceType:
      Description: "Instance type to use"
  - AWSMintRegion:
      Description: "AWS region for the mint bucket, could be different from the instance region"
  - Stage:
      Description: "Environment type"
      AllowedValues: ["live", "test"]
  - ApplicationId:
      Description: "Application id"
      AllowedValues: ["pacts", "pacts-staging"]

# a list of senza components to apply to the definition
SenzaComponents:

  # this basic configuration is required for the other components
  - Configuration:
      Type: Senza::StupsAutoConfiguration # auto-detect network setup

  # will create a launch configuration and auto scaling group with scaling triggers
  - AppServer:
      Type: Senza::TaupageAutoScalingGroup
      # General Purpose T2: t2.nano, t2.micro, t2.small, t2.medium, t2.large
      # Note that if an instance type is not available in one region you will get
      # ERROR: AppServer CREATE_FAILED: The requested configuration is currently not supported. Please check the documentation for supported configurations. Launching EC2 instance failed.
      InstanceType: "{{Arguments.InstanceType}}"
      # https://docs.google.com/presentation/d/1W23fETIZk1ov0IOsOGhxE3-tLR5oxJwsgv5BBxC2PFA/edit#slide=id.g16d5ad4553_0_97
      # t2.small default price is $0.026 per Hour
      # SpotPrice: 0.020
      AutoScaling:
        Minimum: 1
        Maximum: 5
        MetricType: CPU
        ScaleUpThreshold: 80
        ScaleDownThreshold: 40
      # SecurityGroups:
      #   - app-{{Arguments.ApplicationId}}
      SecurityGroups:
      -  Fn::GetAtt:
         - SgPacts
         - GroupId
      # IamRoles:
      #   - app-{{Arguments.ApplicationId}}
      IamRoles:
         - Ref: PactsIamRole
      ElasticLoadBalancer: AppLoadBalancer
      AssociatePublicIpAddress: false # change for standalone deployment in default VPC
      TaupageConfig:
        application_id: "{{Arguments.ApplicationId}}"
        application_version: "{{Arguments.version}}"
        appdynamics_application: "MyCoolTeam"
        runtime: Docker
        source: "docker.io/myusr/pacts:{{Arguments.ImgTag}}"
        health_check_path: /diagnostic/status/heartbeat
        health_check_timeout_seconds: 90
        health_check_port: 443
        root: true
        # etcd_discovery_domain: "etcd.{{AccountInfo.TeamID}}"
        scalyr_account_key: "aws:kms:LIVE_SECRET!!!"
        # We use {{Arguments.AWSMintRegion}} instead of {{AccountInfo.Region}} because the mint bucket can by on any region
        mint_bucket: "myorg-stups-mint-{{AccountInfo.AccountID}}-{{Arguments.AWSMintRegion}}"
        # But since senza 1.0.51 we can directly use `{{AccountInfo.MintBucket}}`
        # though this is still not working: https://github.com/zalando-stups/senza/pull/191#issuecomment-213983274
        # mint_bucket: "{{AccountInfo.MintBucket}}"
        ports:
          443: 443
        environment:
          # see entry.sh for the rest of the env vars
          # No need to set TOKENINFO_URL here since it should be automatically
          # set by taupage left this here for reference only
          # TOKENINFO_URL: "https://info.service.example.com/oauth2/tokeninfo"
          STAGE: "{{Arguments.Stage}}"
          #---------------------------------------#
          # Using AccountInfo is quite convenient #
          #---------------------------------------#
          # e.g. {{AccountInfo.Domain}} == "myteam.example.org" or "myteam-test.example.org"
          # ACCOUNTINFO_DOMAIN: "{{AccountInfo.Domain}}"
          # e.g. {{AccountInfo.TeamID}} == "myteam" or "myteam-test"
          # ACCOUNTINFO_TEAMID: "{{AccountInfo.TeamID}}"
          # e.g. {{AccountInfo.Region}} == "us-east-2" or "us-east-3"
          # ACCOUNTINFO_REGION: "{{AccountInfo.Region}}"
          # e.g. {{AccountInfo.AccountID}} == "123456789012" or "234567890123"
          # ACCOUNTINFO_ACCOUNTID: "{{AccountInfo.AccountID}}"
          # e.g. {{AccountInfo.AccountAlias}} == "myorg-myteam" or "myorg-myteam-test"
          # ACCOUNTINFO_ACCOUNTALIAS: "{{AccountInfo.AccountAlias}}"
          # e.g. {{AccountInfo.VpcID}} == "vpc-12345678"
          # ACCOUNTINFO_VPCID: "{{AccountInfo.VpcID}}"
          # e.g. {{AccountInfo.MintBucket}} == "myorg-stups-mint-123456789012-us-east-2"
          # ACCOUNTINFO_MINTBUCKET: "{{AccountInfo.MintBucket}}"
          # Nesting env vars like this produces something like this:
          # ACCINFO={'VPCID': 'vpc-11111111', 'ACCOUNTALIAS': 'myorg-myteam', 'ACCOUNTID': '111111111111', 'TEAMID': 'team', 'DOMAIN': 'team.myorg.net', 'REGION': 'eu-central-1'}
          # ACCINFO:
          #   DOMAIN: "{{AccountInfo.Domain}}"
          #   TEAMID: "{{AccountInfo.TeamID}}"
          #   REGION: "{{AccountInfo.Region}}"
          #   ACCOUNTID: "{{AccountInfo.AccountID}}"
          #   ACCOUNTALIAS: "{{AccountInfo.AccountAlias}}"
          #   VPCID: "{{AccountInfo.VpcID}}"
        #configure logrotate for application.log
        application_logrotate_size: 256M
        application_logrotate_interval: weekly
        application_logrotate_rotate: 4
        # hostname: "{{Arguments.ApplicationId}}-{{Arguments.version}}"
        # e.g. {{AccountInfo.Domain}} = myteam.example.org
        domain: "{{AccountInfo.Domain}}"
        # defaults
        privileged: false
        docker_daemon_access: false
        read_only: false
        mount_var_log: false
        mount_certs: false
        keep_instance_users: false
        enhanced_cloudwatch_metrics: false

  # creates an ELB entry and Route53 domains to this ELB
  - AppLoadBalancer:
      Type: Senza::WeightedDnsElasticLoadBalancer
      HTTPPort: 443
      HealthCheckPath: /diagnostic/status/heartbeat
      # SecurityGroups:
      #   - app-{{Arguments.ApplicationId}}-lb
      SecurityGroups:
      - Fn::GetAtt:
        - SgPactsLb
        - GroupId
      Scheme: internet-facing
      # MainDomain: pacts-{{Arguments.Stage}}.{{AccountInfo.TeamID}}
      # VersionDomain: pacts-{{Arguments.Stage}}-{{SenzaInfo.StackVersion}}.{{AccountInfo.TeamID}}
      # aws iam list-server-certificates | jq -r '.ServerCertificateMetadataList[0].ServerCertificateName'
      # SSLCertificateId: myteam-ssl-cert-name

Resources:
   # Instance(s) access profile, e.g.
   # https://github.bus.zalan.do/ovirtanen/senza-by-proxy/blob/master/aws/senza-proxy.yaml#L76
   PactsIamRole:
      Type: AWS::IAM::Role
      Properties:
         # If you specify a name, you cannot do updates that require this resource to be replaced.
         # RoleName: app-{{Arguments.ApplicationId}}
         AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Principal:
                 Service: ec2.amazonaws.com
              Action: sts:AssumeRole
         Path: /
         Policies:
           - PolicyName: AmazonEC2Describe
             PolicyDocument:
               Version: "2012-10-17"
               Statement:
               - Effect: Allow
                 Action: ec2:Describe*
                 Resource: "*"
               - Effect: Allow
                 Action: elasticloadbalancing:Describe*
                 Resource: "*"
               - Effect: Allow
                 Action: autoscaling:Describe*
                 Resource: "*"
               - Effect: Allow
                 Sid: AllowMintRead
                 Action:
                 - "s3:GetObject"
                 Resource: arn:aws:s3:::myorg-stups-mint-{{AccountInfo.AccountID}}-{{Arguments.AWSMintRegion}}/*
     
   SgPacts:
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupDescription: Pact Broker internal security group
         Tags:
            - Key: "Name"
              Value: app-{{Arguments.ApplicationId}}
         SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: 443
           ToPort: 443
           CidrIp: "0.0.0.0/0"
         - IpProtocol: tcp
           FromPort: 22
           ToPort: 22
           SourceSecurityGroupName: "Odd (SSH Bastion Host)"
         - IpProtocol: tcp
           FromPort: 9200
           ToPort: 9200
           SourceSecurityGroupName: "Odd (SSH Bastion Host)"
         - IpProtocol: tcp
           FromPort: 9100
           ToPort: 9100
           SourceSecurityGroupName: "app-zmon-tip"

   SgPactsLb:
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
      # e.g. https://github.bus.zalan.do/norris/norris-devops/blob/master/gooddata-service/integration/resources-integration.yaml#L29
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupDescription: Pact Broker external LB security group
         Tags:
            - Key: "Name"
              Value: app-{{Arguments.ApplicationId}}-lb
         SecurityGroupIngress:
         -  IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: "0.0.0.0/0"

